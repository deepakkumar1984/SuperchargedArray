<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InternalDoubleKernels" xml:space="preserve">
    <value>#pragma OPENCL EXTENSION cl_khr_fp64 : enable
__kernel void ndarr_add_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	r[i] = a[i] + b[i];
}

__kernel void ndarr_sub_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	r[i] = a[i] - b[i];
}

__kernel void ndarr_mul_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	r[i] = a[i] * b[i];
}

__kernel void ndarr_div_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	r[i] = a[i] / b[i];
}

__kernel void ndarr_mod_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	r[i] = fmod(a[i], b[i]);
}

__kernel void ndarr_neg_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = -x[i];
}

__kernel void ndarr_sign_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	if (x[i] &gt; 0)
		r[i] = 1;
	else if (x[i] &lt; 0)
		r[i] = -1;
	else
		r[i] = 0;
}

__kernel void ndarr_abs_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = fabs(x[i]);
}


__kernel void ndarr_fill_double(global double* x, double value)
{
	const int i = get_global_id(0);

	x[i] = value;
}

__kernel void ndarr_gt_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	if (a[i] &gt; b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_ge_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	if (a[i] &gt;= b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_lt_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	if (a[i] &lt; b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_le_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	if (a[i] &lt;= b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_eq_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	if (a[i] == b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_ne_double(global double* a, global double* b, global double* r)
{
	const int i = get_global_id(0);

	if (a[i] != b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_exp_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = exp(x[i]);
}

__kernel void ndarr_log_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = log(x[i]);
}

__kernel void ndarr_log1p_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = log1p(x[i]);
}

__kernel void ndarr_log10_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = log10(x[i]);
}

__kernel void ndarr_sqrt_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = sqrt(x[i]);
}

__kernel void ndarr_pow_double(global double* x, double value, global double* r)
{
	const int i = get_global_id(0);

	r[i] = pow(x[i], value);
}

__kernel void ndarr_tpow_double(double value, global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = pow(value, x[i]);
}

__kernel void ndarr_square_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = pow(x[i], 2);
}

__kernel void ndarr_floor_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = floor(x[i]);
}

__kernel void ndarr_ceil_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = ceil(x[i]);
}

__kernel void ndarr_round_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = round(x[i]);
}

__kernel void ndarr_trunc_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = trunc(x[i]);
}

__kernel void ndarr_clip_double(global double* x, double min, double max, global double* r)
{
	const int i = get_global_id(0);

	if (x[i] &gt; min &amp;&amp; x[i] &lt; max)
		r[i] = x[i];
	else if (x[i] &gt;= max)
		r[i] = max;
	else if (x[i] &lt;= min)
		r[i] = min;
}

__kernel void ndarr_sin_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = sin(x[i]);
}

__kernel void ndarr_cos_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = cos(x[i]);
}

__kernel void ndarr_tan_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = tan(x[i]);
}

__kernel void ndarr_arcsin_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = asin(x[i]);
}

__kernel void ndarr_arccos_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = acos(x[i]);
}

__kernel void ndarr_arctan_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = atan(x[i]);
}

__kernel void ndarr_sinh_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = sinh(x[i]);
}

__kernel void ndarr_cosh_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = cosh(x[i]);
}

__kernel void ndarr_tanh_double(global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = tanh(x[i]);
}

__kernel void ndarr_arctan2_double(global double* y, global double* x, global double* r)
{
	const int i = get_global_id(0);

	r[i] = atan2(y[i], x[i]);
}</value>
  </data>
  <data name="InternalFloatKernels" xml:space="preserve">
    <value>__kernel void ndarr_add_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	r[i] = a[i] + b[i];
}

__kernel void ndarr_sub_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	r[i] = a[i] - b[i];
}

__kernel void ndarr_mul_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	r[i] = a[i] * b[i];
}

__kernel void ndarr_div_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	r[i] = a[i] / b[i];
}

__kernel void ndarr_mod_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	r[i] = fmod(a[i], b[i]);
}

__kernel void ndarr_neg_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = -x[i];
}

__kernel void ndarr_sign_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	if (x[i] &gt; 0)
		r[i] = 1;
	else if (x[i] &lt; 0)
		r[i] = -1;
	else
		r[i] = 0;
}

__kernel void ndarr_abs_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = fabs(x[i]);
}


__kernel void ndarr_fill_float(global float* x, float value)
{
	const int i = get_global_id(0);

	x[i] = value;
}

__kernel void ndarr_gt_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	if (a[i] &gt; b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_ge_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	if (a[i] &gt;= b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_lt_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	if (a[i] &lt; b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_le_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	if (a[i] &lt;= b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_eq_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	if (a[i] == b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_ne_float(global float* a, global float* b, global float* r)
{
	const int i = get_global_id(0);

	if (a[i] != b[i])
		r[i] = 1;
	else
		r[i] = 0;
}

__kernel void ndarr_exp_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = exp(x[i]);
}

__kernel void ndarr_log_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = log(x[i]);
}

__kernel void ndarr_log1p_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = log1p(x[i]);
}

__kernel void ndarr_log10_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = log10(x[i]);
}

__kernel void ndarr_sqrt_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = sqrt(x[i]);
}

__kernel void ndarr_pow_float(global float* x, float value, global float* r)
{
	const int i = get_global_id(0);

	r[i] = pow(x[i], value);
}

__kernel void ndarr_tpow_float(float value, global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = pow(value, x[i]);
}

__kernel void ndarr_square_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = pow(x[i], 2);
}

__kernel void ndarr_floor_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = floor(x[i]);
}

__kernel void ndarr_ceil_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = ceil(x[i]);
}

__kernel void ndarr_round_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = round(x[i]);
}

__kernel void ndarr_trunc_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = trunc(x[i]);
}

__kernel void ndarr_clip_float(global float* x, float min, float max, global float* r)
{
	const int i = get_global_id(0);

	if (x[i] &gt; min &amp;&amp; x[i] &lt; max)
		r[i] = x[i];
	else if (x[i] &gt;= max)
		r[i] = max;
	else if (x[i] &lt;= min)
		r[i] = min;
}

__kernel void ndarr_sin_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = sin(x[i]);
}

__kernel void ndarr_cos_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = cos(x[i]);
}

__kernel void ndarr_tan_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = tan(x[i]);
}

__kernel void ndarr_arcsin_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = asin(x[i]);
}

__kernel void ndarr_arccos_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = acos(x[i]);
}

__kernel void ndarr_arctan_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = atan(x[i]);
}

__kernel void ndarr_sinh_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = sinh(x[i]);
}

__kernel void ndarr_cosh_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = cosh(x[i]);
}

__kernel void ndarr_tanh_float(global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = tanh(x[i]);
}

__kernel void ndarr_arctan2_float(global float* y, global float* x, global float* r)
{
	const int i = get_global_id(0);

	r[i] = atan2(y[i], x[i]);
}</value>
  </data>
</root>